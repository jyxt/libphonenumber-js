{"version":3,"sources":["../source/validate.js"],"names":["is_valid","first_argument","second_argument","third_argument","sort_out_arguments","input","metadata","Error","country","country_metadata","countries","phone"],"mappings":";;;;;kBAqBwBA,Q;;AArBxB;;;;AAEA;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,QAAT,CAAkBC,cAAlB,EAAkCC,eAAlC,EAAmDC,cAAnD,EACf;AAAA,2BAC6BC,mBAAmBH,cAAnB,EAAmCC,eAAnC,EAAoDC,cAApD,CAD7B;AAAA,KACSE,KADT,uBACSA,KADT;AAAA,KACgBC,QADhB,uBACgBA,QADhB;;AAGC;;;AACA,KAAI,CAACA,QAAL,EACA;AACC,QAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACA;;AAED,KAAI,CAACF,KAAL,EACA;AACC,SAAO,KAAP;AACA;;AAED,KAAI,CAACA,MAAMG,OAAX,EACA;AACC,SAAO,KAAP;AACA;;AAED,KAAMC,mBAAmBH,SAASI,SAAT,CAAmBL,MAAMG,OAAzB,CAAzB;;AAEA,KAAI,yBAAUC,gBAAV,CAAJ,EACA;AACC,MAAI,CAAC,4BAAgBJ,MAAMM,KAAtB,EAA6BN,MAAMG,OAAnC,EAA4CF,QAA5C,CAAL,EACA;AACC,UAAO,KAAP;AACA;AACD;;AAED,QAAO,IAAP;AACA;;AAED;AACA,SAASF,kBAAT,CAA4BH,cAA5B,EAA4CC,eAA5C,EAA6DC,cAA7D,EACA;AACC,KAAIE,cAAJ;AACA,KAAIC,iBAAJ;;AAEA,KAAI,OAAOL,cAAP,KAA0B,QAA9B,EACA;AACC;AACA,MAAI,OAAOC,eAAP,KAA2B,QAA/B,EACA;AACCI,cAAWH,cAAX;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAI,mCAAuBF,cAAvB,CAAJ,EACA;AACCI,YAAQ,qBAAMJ,cAAN,EAAsBC,eAAtB,EAAuCI,QAAvC,CAAR;AACA;AACD;AACD;AAdA,OAgBA;AACCA,eAAWJ,eAAX;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAI,mCAAuBD,cAAvB,CAAJ,EACA;AACCI,aAAQ,qBAAMJ,cAAN,EAAsBK,QAAtB,CAAR;AACA;AACD;AACD,EAhCD,MAkCA;AACC;AACA;AACA,MAAIL,kBAAkBA,eAAeU,KAAjC,IAA0C,mCAAuBV,eAAeU,KAAtC,CAA9C,EACA;AACCN,WAAQJ,cAAR;AACA;;AAEDK,aAAWJ,eAAX;AACA;;AAED,QAAO,EAAEG,YAAF,EAASC,kBAAT,EAAP;AACA","file":"validate.js","sourcesContent":["import parse, { get_number_type, is_viable_phone_number } from './parse'\n\nimport\n{\n\tget_types\n}\nfrom './metadata'\n\n// Checks if a given phone number is valid\n//\n// Example use cases:\n//\n// ```js\n// is_valid('8005553535', 'RU')\n// is_valid('8005553535', 'RU', metadata)\n// is_valid({ phone: '8005553535', country: 'RU' })\n// is_valid({ phone: '8005553535', country: 'RU' }, metadata)\n// is_valid('+78005553535')\n// is_valid('+78005553535', metadata)\n// ```\n//\nexport default function is_valid(first_argument, second_argument, third_argument)\n{\n\tconst { input, metadata } = sort_out_arguments(first_argument, second_argument, third_argument)\n\n\t// Sanity check\n\tif (!metadata)\n\t{\n\t\tthrow new Error('Metadata not passed')\n\t}\n\n\tif (!input)\n\t{\n\t\treturn false\n\t}\n\n\tif (!input.country)\n\t{\n\t\treturn false\n\t}\n\n\tconst country_metadata = metadata.countries[input.country]\n\n\tif (get_types(country_metadata))\n\t{\n\t\tif (!get_number_type(input.phone, input.country, metadata))\n\t\t{\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\n// Sort out arguments\nfunction sort_out_arguments(first_argument, second_argument, third_argument)\n{\n\tlet input\n\tlet metadata\n\n\tif (typeof first_argument === 'string')\n\t{\n\t\t// If country code is supplied\n\t\tif (typeof second_argument === 'string')\n\t\t{\n\t\t\tmetadata = third_argument\n\n\t\t\t// `parse` extracts phone numbers from raw text,\n\t\t\t// therefore it will cut off all \"garbage\" characters,\n\t\t\t// while this `validate` function needs to verify\n\t\t\t// that the phone number contains no \"garbage\"\n\t\t\t// therefore the explicit `is_viable_phone_number` check.\n\t\t\tif (is_viable_phone_number(first_argument))\n\t\t\t{\n\t\t\t\tinput = parse(first_argument, second_argument, metadata)\n\t\t\t}\n\t\t}\n\t\t// Just an international phone number is supplied\n\t\telse\n\t\t{\n\t\t\tmetadata = second_argument\n\n\t\t\t// `parse` extracts phone numbers from raw text,\n\t\t\t// therefore it will cut off all \"garbage\" characters,\n\t\t\t// while this `validate` function needs to verify\n\t\t\t// that the phone number contains no \"garbage\"\n\t\t\t// therefore the explicit `is_viable_phone_number` check.\n\t\t\tif (is_viable_phone_number(first_argument))\n\t\t\t{\n\t\t\t\tinput = parse(first_argument, metadata)\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// The `first_argument` must be a valid phone number\n\t\t// as a whole, not just a part of it which gets parsed here.\n\t\tif (first_argument && first_argument.phone && is_viable_phone_number(first_argument.phone))\n\t\t{\n\t\t\tinput = first_argument\n\t\t}\n\n\t\tmetadata = second_argument\n\t}\n\n\treturn { input, metadata }\n}"]}