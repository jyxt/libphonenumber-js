{"version":3,"sources":["../source/metadata.js"],"names":["get_phone_code","get_national_number_pattern","get_formats","get_national_prefix","get_national_prefix_formatting_rule","get_national_prefix_for_parsing","get_national_prefix_transform_rule","get_national_prefix_is_optional_when_formatting","get_leading_digits","get_format_pattern","get_format_format","get_format_leading_digits_patterns","get_format_national_prefix_formatting_rule","get_format_national_prefix_is_optional_when_formatting","get_format_national_prefix_is_mandatory_when_formatting","get_format_international_format","get_metadata_by_country_phone_code","get_types","get_type_fixed_line","get_type_mobile","get_type_toll_free","get_type_premium_rate","get_type_personal_number","get_type_voice_mail","get_type_uan","get_type_pager","get_type_voip","get_type_shared_cost","country_metadata","national_prefix_for_parsing","format_array","national_prefix_formatting_rule","test","replace","country_phone_code","metadata","country_code","country_phone_code_to_countries","countries","get_type","index","undefined"],"mappings":"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","file":"metadata.js","sourcesContent":["export function get_phone_code(country_metadata)\n{\n\treturn country_metadata[0]\n}\n\nexport function get_national_number_pattern(country_metadata)\n{\n\treturn country_metadata[1]\n}\n\nexport function get_formats(country_metadata)\n{\n\treturn country_metadata[2] || []\n}\n\nexport function get_national_prefix(country_metadata)\n{\n\treturn country_metadata[3]\n}\n\nexport function get_national_prefix_formatting_rule(country_metadata)\n{\n\treturn country_metadata[4]\n}\n\nexport function get_national_prefix_for_parsing(country_metadata)\n{\n\tlet national_prefix_for_parsing = country_metadata[5]\n\n\t// If `national_prefix_for_parsing` is not set explicitly,\n\t// then infer it from `national_prefix` (if any)\n\tif (!national_prefix_for_parsing)\n\t{\n\t\tnational_prefix_for_parsing = get_national_prefix(country_metadata)\n\t}\n\n\treturn national_prefix_for_parsing\n}\n\nexport function get_national_prefix_transform_rule(country_metadata)\n{\n\treturn country_metadata[6]\n}\n\nexport function get_national_prefix_is_optional_when_formatting(country_metadata)\n{\n\treturn country_metadata[7]\n}\n\nexport function get_leading_digits(country_metadata)\n{\n\treturn country_metadata[8]\n}\n\nexport function get_format_pattern(format_array)\n{\n\treturn format_array[0]\n}\n\nexport function get_format_format(format_array)\n{\n\treturn format_array[1]\n}\n\nexport function get_format_leading_digits_patterns(format_array)\n{\n\treturn format_array[2] || []\n}\n\nexport function get_format_national_prefix_formatting_rule(format_array, country_metadata)\n{\n\treturn format_array[3] || get_national_prefix_formatting_rule(country_metadata)\n}\n\nexport function get_format_national_prefix_is_optional_when_formatting(format_array, country_metadata)\n{\n\treturn format_array[4] || get_national_prefix_is_optional_when_formatting(country_metadata)\n}\n\nexport function get_format_national_prefix_is_mandatory_when_formatting(format_array, country_metadata)\n{\n\tconst national_prefix_formatting_rule = get_format_national_prefix_formatting_rule(format_array, country_metadata)\n\n\t// National prefix is omitted if there's no national prefix formatting rule\n\t// set for this country, or when the national prefix formatting rule\n\t// contains no national prefix itself, or when this rule is set but\n\t// national prefix is optional for this phone number format\n\t// (and it is not enforced explicitly)\n\treturn national_prefix_formatting_rule &&\n\t\t// Check that national prefix formatting rule is not a dummy one\n\t\tnational_prefix_formatting_rule !== '$1' &&\n\t\t// Check that national prefix formatting rule actually has national prefix digit(s)\n\t\t/\\d/.test(national_prefix_formatting_rule.replace('$1', '')) &&\n\t\t// Or maybe national prefix is optional for this format\n\t\t!get_format_national_prefix_is_optional_when_formatting(format_array, country_metadata)\n}\n\nexport function get_format_international_format(format_array)\n{\n\treturn format_array[5] || get_format_format(format_array)\n}\n\n// Formatting information for regions which share\n// a country calling code is contained by only one region\n// for performance reasons. For example, for NANPA region\n// (\"North American Numbering Plan Administration\",\n//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n// it will be contained in the metadata for `US`.\nexport function get_metadata_by_country_phone_code(country_phone_code, metadata)\n{\n\tconst country_code = metadata.country_phone_code_to_countries[country_phone_code][0]\n\treturn metadata.countries[country_code]\n}\n\nexport function get_types(country_metadata)\n{\n\treturn country_metadata[9]\n}\n\nfunction get_type(country_metadata, index)\n{\n\treturn get_types(country_metadata) ? get_types(country_metadata)[index] : undefined\n}\n\nexport function get_type_fixed_line(country_metadata)\n{\n\treturn get_type(country_metadata, 0)\n}\n\nexport function get_type_mobile(country_metadata)\n{\n\treturn get_type(country_metadata, 1)\n}\n\nexport function get_type_toll_free(country_metadata)\n{\n\treturn get_type(country_metadata, 2)\n}\n\nexport function get_type_premium_rate(country_metadata)\n{\n\treturn get_type(country_metadata, 3)\n}\n\nexport function get_type_personal_number(country_metadata)\n{\n\treturn get_type(country_metadata, 4)\n}\n\nexport function get_type_voice_mail(country_metadata)\n{\n\treturn get_type(country_metadata, 5)\n}\n\nexport function get_type_uan(country_metadata)\n{\n\treturn get_type(country_metadata, 6)\n}\n\nexport function get_type_pager(country_metadata)\n{\n\treturn get_type(country_metadata, 7)\n}\n\nexport function get_type_voip(country_metadata)\n{\n\treturn get_type(country_metadata, 8)\n}\n\nexport function get_type_shared_cost(country_metadata)\n{\n\treturn get_type(country_metadata, 9)\n}"]}